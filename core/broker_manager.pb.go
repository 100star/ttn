// Code generated by protoc-gen-gogo.
// source: broker_manager.proto
// DO NOT EDIT!

/*
	Package core is a generated protocol buffer package.

	It is generated from these files:
		broker_manager.proto
		handler_manager.proto
		broker.proto
		core.proto
		application.proto
		handler.proto
		router.proto
		lorawan.proto

	It has these top-level messages:
		RegisterOTAABrokerReq
		RegisterOTAABrokerRes
		UpsertABPBrokerReq
		UpsertABPBrokerRes
		BrokerDevice
		ListDevicesBrokerReq
		ListDevicesBrokerRes
		UpsertOTAAHandlerReq
		UpsertOTAAHandlerRes
		UpsertABPHandlerReq
		UpsertABPHandlerRes
		ListDevicesHandlerReq
		ListDevicesHandlerRes
		HandlerABPDevice
		HandlerOTAADevice
		DataBrokerReq
		DataBrokerRes
		JoinBrokerReq
		JoinBrokerRes
		Metadata
		StatsMetadata
		DataAppReq
		DataAppRes
		JoinAppReq
		JoinAppRes
		DataUpHandlerReq
		DataUpHandlerRes
		DataDownHandlerReq
		DataDownHandlerRes
		JoinHandlerReq
		JoinHandlerRes
		DataRouterReq
		DataRouterRes
		StatsReq
		StatsRes
		JoinRouterReq
		JoinRouterRes
		LoRaWANData
		LoRaWANMHDR
		LoRaWANMACPayload
		LoRaWANFHDR
		LoRaWANFCtrl
		LoRaWANJoinRequest
		LoRaWANJoinAccept
		LoRaWANDLSettings
*/
package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RegisterOTAABrokerReq struct {
	AppEUI     []byte `protobuf:"bytes,1,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	NetAddress string `protobuf:"bytes,2,opt,name=NetAddress,json=netAddress,proto3" json:"NetAddress,omitempty"`
}

func (m *RegisterOTAABrokerReq) Reset()         { *m = RegisterOTAABrokerReq{} }
func (m *RegisterOTAABrokerReq) String() string { return proto.CompactTextString(m) }
func (*RegisterOTAABrokerReq) ProtoMessage()    {}
func (*RegisterOTAABrokerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{0}
}

type RegisterOTAABrokerRes struct {
}

func (m *RegisterOTAABrokerRes) Reset()         { *m = RegisterOTAABrokerRes{} }
func (m *RegisterOTAABrokerRes) String() string { return proto.CompactTextString(m) }
func (*RegisterOTAABrokerRes) ProtoMessage()    {}
func (*RegisterOTAABrokerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{1}
}

type UpsertABPBrokerReq struct {
	AppEUI  []byte `protobuf:"bytes,1,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	DevAddr []byte `protobuf:"bytes,2,opt,name=DevAddr,json=devAddr,proto3" json:"DevAddr,omitempty"`
	NwkSKey []byte `protobuf:"bytes,3,opt,name=NwkSKey,json=nwkSKey,proto3" json:"NwkSKey,omitempty"`
}

func (m *UpsertABPBrokerReq) Reset()                    { *m = UpsertABPBrokerReq{} }
func (m *UpsertABPBrokerReq) String() string            { return proto.CompactTextString(m) }
func (*UpsertABPBrokerReq) ProtoMessage()               {}
func (*UpsertABPBrokerReq) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{2} }

type UpsertABPBrokerRes struct {
}

func (m *UpsertABPBrokerRes) Reset()                    { *m = UpsertABPBrokerRes{} }
func (m *UpsertABPBrokerRes) String() string            { return proto.CompactTextString(m) }
func (*UpsertABPBrokerRes) ProtoMessage()               {}
func (*UpsertABPBrokerRes) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{3} }

type BrokerDevice struct {
	DevEUI  []byte `protobuf:"bytes,1,opt,name=DevEUI,json=devEUI,proto3" json:"DevEUI,omitempty"`
	DevAddr []byte `protobuf:"bytes,2,opt,name=DevAddr,json=devAddr,proto3" json:"DevAddr,omitempty"`
	NwkSKey []byte `protobuf:"bytes,3,opt,name=NwkSKey,json=nwkSKey,proto3" json:"NwkSKey,omitempty"`
}

func (m *BrokerDevice) Reset()                    { *m = BrokerDevice{} }
func (m *BrokerDevice) String() string            { return proto.CompactTextString(m) }
func (*BrokerDevice) ProtoMessage()               {}
func (*BrokerDevice) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{4} }

type ListDevicesBrokerReq struct {
	AppEUI []byte `protobuf:"bytes,1,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
}

func (m *ListDevicesBrokerReq) Reset()         { *m = ListDevicesBrokerReq{} }
func (m *ListDevicesBrokerReq) String() string { return proto.CompactTextString(m) }
func (*ListDevicesBrokerReq) ProtoMessage()    {}
func (*ListDevicesBrokerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{5}
}

type ListDevicesBrokerRes struct {
	Devices []*BrokerDevice `protobuf:"bytes,1,rep,name=Devices,json=devices" json:"Devices,omitempty"`
}

func (m *ListDevicesBrokerRes) Reset()         { *m = ListDevicesBrokerRes{} }
func (m *ListDevicesBrokerRes) String() string { return proto.CompactTextString(m) }
func (*ListDevicesBrokerRes) ProtoMessage()    {}
func (*ListDevicesBrokerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{6}
}

func (m *ListDevicesBrokerRes) GetDevices() []*BrokerDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterOTAABrokerReq)(nil), "core.RegisterOTAABrokerReq")
	proto.RegisterType((*RegisterOTAABrokerRes)(nil), "core.RegisterOTAABrokerRes")
	proto.RegisterType((*UpsertABPBrokerReq)(nil), "core.UpsertABPBrokerReq")
	proto.RegisterType((*UpsertABPBrokerRes)(nil), "core.UpsertABPBrokerRes")
	proto.RegisterType((*BrokerDevice)(nil), "core.BrokerDevice")
	proto.RegisterType((*ListDevicesBrokerReq)(nil), "core.ListDevicesBrokerReq")
	proto.RegisterType((*ListDevicesBrokerRes)(nil), "core.ListDevicesBrokerRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for BrokerManager service

type BrokerManagerClient interface {
	RegisterOTAA(ctx context.Context, in *RegisterOTAABrokerReq, opts ...grpc.CallOption) (*RegisterOTAABrokerRes, error)
	UpsertABP(ctx context.Context, in *UpsertABPBrokerReq, opts ...grpc.CallOption) (*UpsertABPBrokerRes, error)
	ListDevices(ctx context.Context, in *ListDevicesBrokerReq, opts ...grpc.CallOption) (*ListDevicesBrokerRes, error)
}

type brokerManagerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerManagerClient(cc *grpc.ClientConn) BrokerManagerClient {
	return &brokerManagerClient{cc}
}

func (c *brokerManagerClient) RegisterOTAA(ctx context.Context, in *RegisterOTAABrokerReq, opts ...grpc.CallOption) (*RegisterOTAABrokerRes, error) {
	out := new(RegisterOTAABrokerRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/RegisterOTAA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) UpsertABP(ctx context.Context, in *UpsertABPBrokerReq, opts ...grpc.CallOption) (*UpsertABPBrokerRes, error) {
	out := new(UpsertABPBrokerRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/UpsertABP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) ListDevices(ctx context.Context, in *ListDevicesBrokerReq, opts ...grpc.CallOption) (*ListDevicesBrokerRes, error) {
	out := new(ListDevicesBrokerRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrokerManager service

type BrokerManagerServer interface {
	RegisterOTAA(context.Context, *RegisterOTAABrokerReq) (*RegisterOTAABrokerRes, error)
	UpsertABP(context.Context, *UpsertABPBrokerReq) (*UpsertABPBrokerRes, error)
	ListDevices(context.Context, *ListDevicesBrokerReq) (*ListDevicesBrokerRes, error)
}

func RegisterBrokerManagerServer(s *grpc.Server, srv BrokerManagerServer) {
	s.RegisterService(&_BrokerManager_serviceDesc, srv)
}

func _BrokerManager_RegisterOTAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterOTAABrokerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).RegisterOTAA(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BrokerManager_UpsertABP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpsertABPBrokerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).UpsertABP(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BrokerManager_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListDevicesBrokerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).ListDevices(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BrokerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.BrokerManager",
	HandlerType: (*BrokerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOTAA",
			Handler:    _BrokerManager_RegisterOTAA_Handler,
		},
		{
			MethodName: "UpsertABP",
			Handler:    _BrokerManager_UpsertABP_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _BrokerManager_ListDevices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *RegisterOTAABrokerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegisterOTAABrokerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	if len(m.NetAddress) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.NetAddress)))
		i += copy(data[i:], m.NetAddress)
	}
	return i, nil
}

func (m *RegisterOTAABrokerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegisterOTAABrokerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpsertABPBrokerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertABPBrokerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	if m.DevAddr != nil {
		if len(m.DevAddr) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.DevAddr)))
			i += copy(data[i:], m.DevAddr)
		}
	}
	if m.NwkSKey != nil {
		if len(m.NwkSKey) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.NwkSKey)))
			i += copy(data[i:], m.NwkSKey)
		}
	}
	return i, nil
}

func (m *UpsertABPBrokerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertABPBrokerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BrokerDevice) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerDevice) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DevEUI != nil {
		if len(m.DevEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.DevEUI)))
			i += copy(data[i:], m.DevEUI)
		}
	}
	if m.DevAddr != nil {
		if len(m.DevAddr) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.DevAddr)))
			i += copy(data[i:], m.DevAddr)
		}
	}
	if m.NwkSKey != nil {
		if len(m.NwkSKey) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.NwkSKey)))
			i += copy(data[i:], m.NwkSKey)
		}
	}
	return i, nil
}

func (m *ListDevicesBrokerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListDevicesBrokerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	return i, nil
}

func (m *ListDevicesBrokerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListDevicesBrokerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, msg := range m.Devices {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64BrokerManager(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BrokerManager(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBrokerManager(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterOTAABrokerReq) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	l = len(m.NetAddress)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *RegisterOTAABrokerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpsertABPBrokerReq) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	if m.DevAddr != nil {
		l = len(m.DevAddr)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	if m.NwkSKey != nil {
		l = len(m.NwkSKey)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	return n
}

func (m *UpsertABPBrokerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BrokerDevice) Size() (n int) {
	var l int
	_ = l
	if m.DevEUI != nil {
		l = len(m.DevEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	if m.DevAddr != nil {
		l = len(m.DevAddr)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	if m.NwkSKey != nil {
		l = len(m.NwkSKey)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	return n
}

func (m *ListDevicesBrokerReq) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	return n
}

func (m *ListDevicesBrokerRes) Size() (n int) {
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	return n
}

func sovBrokerManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBrokerManager(x uint64) (n int) {
	return sovBrokerManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterOTAABrokerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOTAABrokerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOTAABrokerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOTAABrokerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOTAABrokerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOTAABrokerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertABPBrokerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertABPBrokerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertABPBrokerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertABPBrokerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertABPBrokerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertABPBrokerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerDevice) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesBrokerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesBrokerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesBrokerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesBrokerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesBrokerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesBrokerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &BrokerDevice{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrokerManager(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBrokerManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBrokerManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBrokerManager(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBrokerManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrokerManager   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorBrokerManager = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x2a, 0xca, 0xcf,
	0x4e, 0x2d, 0x8a, 0xcf, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x49, 0xce, 0x2f, 0x4a, 0x55, 0xf2, 0xe7, 0x12, 0x0d, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e,
	0x49, 0x2d, 0xf2, 0x0f, 0x71, 0x74, 0x74, 0x02, 0xab, 0x0c, 0x4a, 0x2d, 0x14, 0x12, 0xe3, 0x62,
	0x73, 0x2c, 0x28, 0x70, 0x0d, 0xf5, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x62, 0x4b, 0x04,
	0xf3, 0x84, 0xe4, 0xb8, 0xb8, 0xfc, 0x52, 0x4b, 0x1c, 0x53, 0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x25,
	0x98, 0x80, 0x72, 0x9c, 0x41, 0x5c, 0x79, 0x70, 0x11, 0x25, 0x71, 0xec, 0x06, 0x16, 0x2b, 0x25,
	0x70, 0x09, 0x85, 0x16, 0x14, 0xa7, 0x16, 0x95, 0x38, 0x3a, 0x05, 0x10, 0xb6, 0x46, 0x82, 0x8b,
	0xdd, 0x25, 0xb5, 0x0c, 0x64, 0x28, 0xd8, 0x0e, 0x9e, 0x20, 0xf6, 0x14, 0x08, 0x17, 0x24, 0xe3,
	0x57, 0x9e, 0x1d, 0xec, 0x9d, 0x5a, 0x29, 0xc1, 0x0c, 0x91, 0xc9, 0x83, 0x70, 0x95, 0x44, 0xb0,
	0xd8, 0x50, 0xac, 0x14, 0xc5, 0xc5, 0x03, 0xe1, 0x00, 0xcd, 0xcb, 0x4c, 0x4e, 0x05, 0xd9, 0x08,
	0x64, 0x21, 0xd9, 0x98, 0x02, 0xe6, 0x91, 0x65, 0xa3, 0x1e, 0x97, 0x88, 0x0f, 0xd0, 0xab, 0x10,
	0x93, 0x8b, 0x09, 0xfa, 0x4a, 0xc9, 0x05, 0xab, 0xfa, 0x62, 0x21, 0x1d, 0xb0, 0xdd, 0x20, 0x31,
	0xa0, 0x06, 0x66, 0x0d, 0x6e, 0x23, 0x21, 0x3d, 0x50, 0xec, 0xe8, 0x21, 0x3b, 0x1c, 0xec, 0x1e,
	0x90, 0x12, 0xa3, 0x87, 0x8c, 0x5c, 0xbc, 0x10, 0x19, 0x5f, 0x48, 0x8c, 0x0a, 0x79, 0x70, 0xf1,
	0x20, 0x07, 0xba, 0x90, 0x34, 0x44, 0x3b, 0xd6, 0x98, 0x95, 0xc2, 0x23, 0x59, 0x2c, 0x64, 0xcf,
	0xc5, 0x09, 0x0f, 0x43, 0x21, 0x09, 0x88, 0x4a, 0xcc, 0x68, 0x93, 0xc2, 0x25, 0x53, 0x2c, 0xe4,
	0xca, 0xc5, 0x8d, 0xe4, 0x45, 0x21, 0x29, 0x88, 0x42, 0x6c, 0xa1, 0x24, 0x85, 0x5b, 0xae, 0xd8,
	0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x40, 0xfc, 0x00, 0x88, 0x67, 0x3c, 0x96, 0x63, 0x48,
	0x62, 0x03, 0x27, 0x5b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0x95, 0x62, 0xd4, 0xce,
	0x02, 0x00, 0x00,
}
