// Code generated by protoc-gen-gogo.
// source: broker_manager.proto
// DO NOT EDIT!

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BrokerCreateAppReq struct {
	AppEUI     []byte `protobuf:"bytes,1,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	NetAddress string `protobuf:"bytes,2,opt,name=NetAddress,json=netAddress,proto3" json:"NetAddress,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
}

func (m *BrokerCreateAppReq) Reset()                    { *m = BrokerCreateAppReq{} }
func (m *BrokerCreateAppReq) String() string            { return proto.CompactTextString(m) }
func (*BrokerCreateAppReq) ProtoMessage()               {}
func (*BrokerCreateAppReq) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{0} }

type BrokerUpdateAppReq struct {
	AppEUI []byte `protobuf:"bytes,1,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*BrokerUpdateAppReq_NetAddress
	//	*BrokerUpdateAppReq_Password
	Update isBrokerUpdateAppReq_Update `protobuf_oneof:"Update"`
}

func (m *BrokerUpdateAppReq) Reset()                    { *m = BrokerUpdateAppReq{} }
func (m *BrokerUpdateAppReq) String() string            { return proto.CompactTextString(m) }
func (*BrokerUpdateAppReq) ProtoMessage()               {}
func (*BrokerUpdateAppReq) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{1} }

type isBrokerUpdateAppReq_Update interface {
	isBrokerUpdateAppReq_Update()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BrokerUpdateAppReq_NetAddress struct {
	NetAddress string `protobuf:"bytes,3,opt,name=NetAddress,json=netAddress,proto3,oneof"`
}
type BrokerUpdateAppReq_Password struct {
	Password string `protobuf:"bytes,4,opt,name=Password,json=password,proto3,oneof"`
}

func (*BrokerUpdateAppReq_NetAddress) isBrokerUpdateAppReq_Update() {}
func (*BrokerUpdateAppReq_Password) isBrokerUpdateAppReq_Update()   {}

func (m *BrokerUpdateAppReq) GetUpdate() isBrokerUpdateAppReq_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *BrokerUpdateAppReq) GetNetAddress() string {
	if x, ok := m.GetUpdate().(*BrokerUpdateAppReq_NetAddress); ok {
		return x.NetAddress
	}
	return ""
}

func (m *BrokerUpdateAppReq) GetPassword() string {
	if x, ok := m.GetUpdate().(*BrokerUpdateAppReq_Password); ok {
		return x.Password
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BrokerUpdateAppReq) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BrokerUpdateAppReq_OneofMarshaler, _BrokerUpdateAppReq_OneofUnmarshaler, _BrokerUpdateAppReq_OneofSizer, []interface{}{
		(*BrokerUpdateAppReq_NetAddress)(nil),
		(*BrokerUpdateAppReq_Password)(nil),
	}
}

func _BrokerUpdateAppReq_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BrokerUpdateAppReq)
	// Update
	switch x := m.Update.(type) {
	case *BrokerUpdateAppReq_NetAddress:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.NetAddress)
	case *BrokerUpdateAppReq_Password:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Password)
	case nil:
	default:
		return fmt.Errorf("BrokerUpdateAppReq.Update has unexpected type %T", x)
	}
	return nil
}

func _BrokerUpdateAppReq_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BrokerUpdateAppReq)
	switch tag {
	case 3: // Update.NetAddress
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Update = &BrokerUpdateAppReq_NetAddress{x}
		return true, err
	case 4: // Update.Password
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Update = &BrokerUpdateAppReq_Password{x}
		return true, err
	default:
		return false, nil
	}
}

func _BrokerUpdateAppReq_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BrokerUpdateAppReq)
	// Update
	switch x := m.Update.(type) {
	case *BrokerUpdateAppReq_NetAddress:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.NetAddress)))
		n += len(x.NetAddress)
	case *BrokerUpdateAppReq_Password:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Password)))
		n += len(x.Password)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BrokerUpsertAppRes struct {
	Token string `protobuf:"bytes,2,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *BrokerUpsertAppRes) Reset()                    { *m = BrokerUpsertAppRes{} }
func (m *BrokerUpsertAppRes) String() string            { return proto.CompactTextString(m) }
func (*BrokerUpsertAppRes) ProtoMessage()               {}
func (*BrokerUpsertAppRes) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{2} }

type BrokerDevice struct {
	DevAddr []byte `protobuf:"bytes,1,opt,name=DevAddr,json=devAddr,proto3" json:"DevAddr,omitempty"`
	DevEUI  []byte `protobuf:"bytes,2,opt,name=DevEUI,json=devEUI,proto3" json:"DevEUI,omitempty"`
	NwkSKey []byte `protobuf:"bytes,3,opt,name=NwkSKey,json=nwkSKey,proto3" json:"NwkSKey,omitempty"`
}

func (m *BrokerDevice) Reset()                    { *m = BrokerDevice{} }
func (m *BrokerDevice) String() string            { return proto.CompactTextString(m) }
func (*BrokerDevice) ProtoMessage()               {}
func (*BrokerDevice) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{3} }

type BrokerListDevicesReq struct {
	AppEUI []byte `protobuf:"bytes,1,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *BrokerListDevicesReq) Reset()         { *m = BrokerListDevicesReq{} }
func (m *BrokerListDevicesReq) String() string { return proto.CompactTextString(m) }
func (*BrokerListDevicesReq) ProtoMessage()    {}
func (*BrokerListDevicesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{4}
}

type BrokerListDevicesRes struct {
	Devices []*BrokerDevice `protobuf:"bytes,1,rep,name=Devices,json=devices" json:"Devices,omitempty"`
}

func (m *BrokerListDevicesRes) Reset()         { *m = BrokerListDevicesRes{} }
func (m *BrokerListDevicesRes) String() string { return proto.CompactTextString(m) }
func (*BrokerListDevicesRes) ProtoMessage()    {}
func (*BrokerListDevicesRes) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{5}
}

func (m *BrokerListDevicesRes) GetDevices() []*BrokerDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

type BrokerUpsertDeviceReq struct {
	AppEUI []byte        `protobuf:"bytes,1,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	Token  string        `protobuf:"bytes,2,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	Device *BrokerDevice `protobuf:"bytes,3,opt,name=Device,json=device" json:"Device,omitempty"`
}

func (m *BrokerUpsertDeviceReq) Reset()         { *m = BrokerUpsertDeviceReq{} }
func (m *BrokerUpsertDeviceReq) String() string { return proto.CompactTextString(m) }
func (*BrokerUpsertDeviceReq) ProtoMessage()    {}
func (*BrokerUpsertDeviceReq) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{6}
}

func (m *BrokerUpsertDeviceReq) GetDevice() *BrokerDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

type BrokerUpsertDeviceRes struct {
}

func (m *BrokerUpsertDeviceRes) Reset()         { *m = BrokerUpsertDeviceRes{} }
func (m *BrokerUpsertDeviceRes) String() string { return proto.CompactTextString(m) }
func (*BrokerUpsertDeviceRes) ProtoMessage()    {}
func (*BrokerUpsertDeviceRes) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{7}
}

func init() {
	proto.RegisterType((*BrokerCreateAppReq)(nil), "core.BrokerCreateAppReq")
	proto.RegisterType((*BrokerUpdateAppReq)(nil), "core.BrokerUpdateAppReq")
	proto.RegisterType((*BrokerUpsertAppRes)(nil), "core.BrokerUpsertAppRes")
	proto.RegisterType((*BrokerDevice)(nil), "core.BrokerDevice")
	proto.RegisterType((*BrokerListDevicesReq)(nil), "core.BrokerListDevicesReq")
	proto.RegisterType((*BrokerListDevicesRes)(nil), "core.BrokerListDevicesRes")
	proto.RegisterType((*BrokerUpsertDeviceReq)(nil), "core.BrokerUpsertDeviceReq")
	proto.RegisterType((*BrokerUpsertDeviceRes)(nil), "core.BrokerUpsertDeviceRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for BrokerManager service

type BrokerManagerClient interface {
	CreateApp(ctx context.Context, in *BrokerCreateAppReq, opts ...grpc.CallOption) (*BrokerUpsertAppRes, error)
	UpdateApp(ctx context.Context, in *BrokerUpdateAppReq, opts ...grpc.CallOption) (*BrokerUpsertAppRes, error)
	UpsertDeviceRegistration(ctx context.Context, in *BrokerUpsertDeviceReq, opts ...grpc.CallOption) (*BrokerUpsertDeviceRes, error)
}

type brokerManagerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerManagerClient(cc *grpc.ClientConn) BrokerManagerClient {
	return &brokerManagerClient{cc}
}

func (c *brokerManagerClient) CreateApp(ctx context.Context, in *BrokerCreateAppReq, opts ...grpc.CallOption) (*BrokerUpsertAppRes, error) {
	out := new(BrokerUpsertAppRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) UpdateApp(ctx context.Context, in *BrokerUpdateAppReq, opts ...grpc.CallOption) (*BrokerUpsertAppRes, error) {
	out := new(BrokerUpsertAppRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) UpsertDeviceRegistration(ctx context.Context, in *BrokerUpsertDeviceReq, opts ...grpc.CallOption) (*BrokerUpsertDeviceRes, error) {
	out := new(BrokerUpsertDeviceRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/UpsertDeviceRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrokerManager service

type BrokerManagerServer interface {
	CreateApp(context.Context, *BrokerCreateAppReq) (*BrokerUpsertAppRes, error)
	UpdateApp(context.Context, *BrokerUpdateAppReq) (*BrokerUpsertAppRes, error)
	UpsertDeviceRegistration(context.Context, *BrokerUpsertDeviceReq) (*BrokerUpsertDeviceRes, error)
}

func RegisterBrokerManagerServer(s *grpc.Server, srv BrokerManagerServer) {
	s.RegisterService(&_BrokerManager_serviceDesc, srv)
}

func _BrokerManager_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BrokerCreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).CreateApp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BrokerManager_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BrokerUpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).UpdateApp(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BrokerManager_UpsertDeviceRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BrokerUpsertDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).UpsertDeviceRegistration(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BrokerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.BrokerManager",
	HandlerType: (*BrokerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _BrokerManager_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _BrokerManager_UpdateApp_Handler,
		},
		{
			MethodName: "UpsertDeviceRegistration",
			Handler:    _BrokerManager_UpsertDeviceRegistration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *BrokerCreateAppReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerCreateAppReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	if len(m.NetAddress) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.NetAddress)))
		i += copy(data[i:], m.NetAddress)
	}
	if len(m.Password) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	return i, nil
}

func (m *BrokerUpdateAppReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerUpdateAppReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	if len(m.Token) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if m.Update != nil {
		nn1, err := m.Update.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *BrokerUpdateAppReq_NetAddress) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintBrokerManager(data, i, uint64(len(m.NetAddress)))
	i += copy(data[i:], m.NetAddress)
	return i, nil
}
func (m *BrokerUpdateAppReq_Password) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x22
	i++
	i = encodeVarintBrokerManager(data, i, uint64(len(m.Password)))
	i += copy(data[i:], m.Password)
	return i, nil
}
func (m *BrokerUpsertAppRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerUpsertAppRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *BrokerDevice) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerDevice) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DevAddr != nil {
		if len(m.DevAddr) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.DevAddr)))
			i += copy(data[i:], m.DevAddr)
		}
	}
	if m.DevEUI != nil {
		if len(m.DevEUI) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.DevEUI)))
			i += copy(data[i:], m.DevEUI)
		}
	}
	if m.NwkSKey != nil {
		if len(m.NwkSKey) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.NwkSKey)))
			i += copy(data[i:], m.NwkSKey)
		}
	}
	return i, nil
}

func (m *BrokerListDevicesReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerListDevicesReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	if len(m.Token) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *BrokerListDevicesRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerListDevicesRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, msg := range m.Devices {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BrokerUpsertDeviceReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerUpsertDeviceReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	if len(m.Token) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if m.Device != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintBrokerManager(data, i, uint64(m.Device.Size()))
		n2, err := m.Device.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *BrokerUpsertDeviceRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerUpsertDeviceRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64BrokerManager(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BrokerManager(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBrokerManager(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *BrokerCreateAppReq) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	l = len(m.NetAddress)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *BrokerUpdateAppReq) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	if m.Update != nil {
		n += m.Update.Size()
	}
	return n
}

func (m *BrokerUpdateAppReq_NetAddress) Size() (n int) {
	var l int
	_ = l
	l = len(m.NetAddress)
	n += 1 + l + sovBrokerManager(uint64(l))
	return n
}
func (m *BrokerUpdateAppReq_Password) Size() (n int) {
	var l int
	_ = l
	l = len(m.Password)
	n += 1 + l + sovBrokerManager(uint64(l))
	return n
}
func (m *BrokerUpsertAppRes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *BrokerDevice) Size() (n int) {
	var l int
	_ = l
	if m.DevAddr != nil {
		l = len(m.DevAddr)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	if m.DevEUI != nil {
		l = len(m.DevEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	if m.NwkSKey != nil {
		l = len(m.NwkSKey)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	return n
}

func (m *BrokerListDevicesReq) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *BrokerListDevicesRes) Size() (n int) {
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	return n
}

func (m *BrokerUpsertDeviceReq) Size() (n int) {
	var l int
	_ = l
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovBrokerManager(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *BrokerUpsertDeviceRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovBrokerManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBrokerManager(x uint64) (n int) {
	return sovBrokerManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BrokerCreateAppReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerCreateAppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerCreateAppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerUpdateAppReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerUpdateAppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerUpdateAppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = &BrokerUpdateAppReq_NetAddress{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = &BrokerUpdateAppReq_Password{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerUpsertAppRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerUpsertAppRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerUpsertAppRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerDevice) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerListDevicesReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerListDevicesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerListDevicesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerListDevicesRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerListDevicesRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerListDevicesRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &BrokerDevice{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerUpsertDeviceReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerUpsertDeviceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerUpsertDeviceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &BrokerDevice{}
			}
			if err := m.Device.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerUpsertDeviceRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerUpsertDeviceRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerUpsertDeviceRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrokerManager(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBrokerManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBrokerManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBrokerManager(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBrokerManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrokerManager   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorBrokerManager = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xa5, 0xfc, 0x14, 0xb8, 0x1f, 0x5f, 0x62, 0x26, 0xa8, 0x0d, 0x1a, 0x42, 0x66, 0x45, 0x88,
	0x61, 0x81, 0x0f, 0x60, 0x40, 0x4c, 0x34, 0x2a, 0x31, 0x08, 0x1b, 0x37, 0xa6, 0x30, 0x13, 0x24,
	0xc4, 0xb6, 0xcc, 0x4c, 0x24, 0xbe, 0x83, 0x0f, 0xe0, 0x23, 0xb9, 0xf4, 0x11, 0x8c, 0x2e, 0x7c,
	0x0d, 0xe7, 0xa7, 0xd6, 0x56, 0xf1, 0x87, 0xc5, 0x24, 0x73, 0x7b, 0xee, 0x3d, 0xe7, 0xdc, 0x3b,
	0xb7, 0x50, 0x1e, 0x31, 0x7f, 0x46, 0xd9, 0xe5, 0xb5, 0xeb, 0xb9, 0x13, 0xca, 0x9a, 0x01, 0xf3,
	0x85, 0x8f, 0xb2, 0x63, 0x9f, 0x51, 0x7c, 0x05, 0xa8, 0xa3, 0xd1, 0x7d, 0x46, 0x5d, 0x41, 0xdb,
	0x41, 0xd0, 0xa7, 0x73, 0xb4, 0x01, 0xb6, 0xbc, 0x1d, 0x0c, 0x8f, 0x1c, 0xab, 0x66, 0xd5, 0x4b,
	0x7d, 0xdb, 0xd5, 0x11, 0xaa, 0x02, 0xf4, 0xa8, 0x68, 0x13, 0xc2, 0x28, 0xe7, 0x4e, 0x5a, 0x62,
	0xc5, 0x3e, 0x78, 0xd1, 0x17, 0x54, 0x81, 0xc2, 0x99, 0xcb, 0xf9, 0xc2, 0x67, 0xc4, 0xc9, 0x68,
	0xb4, 0x10, 0x84, 0x31, 0xbe, 0xb3, 0xde, 0xa5, 0x86, 0x01, 0xf9, 0x5d, 0xaa, 0x0c, 0xb9, 0x81,
	0x4c, 0xf6, 0x42, 0x95, 0x9c, 0x50, 0x01, 0xaa, 0x25, 0x0c, 0x68, 0x89, 0xc3, 0x54, 0xc2, 0xc2,
	0x76, 0xcc, 0x42, 0x36, 0xc4, 0x23, 0x13, 0x9d, 0x02, 0xd8, 0x46, 0x1d, 0x37, 0x3e, 0xdc, 0x70,
	0xca, 0x84, 0x76, 0xc3, 0x97, 0xab, 0xe2, 0x0b, 0x28, 0x99, 0xdc, 0x2e, 0xbd, 0x99, 0x8e, 0x29,
	0x72, 0x20, 0x2f, 0x6f, 0x4a, 0x31, 0x34, 0x9d, 0x27, 0x26, 0x54, 0xdd, 0x48, 0x44, 0x75, 0x93,
	0x36, 0xdd, 0x10, 0x1d, 0xa9, 0x8a, 0xde, 0x62, 0x76, 0x7e, 0x4c, 0x6f, 0xb5, 0x69, 0x59, 0xe1,
	0x99, 0x10, 0x77, 0xa1, 0x6c, 0xb8, 0x4f, 0xa6, 0x5c, 0x18, 0x7e, 0xbe, 0xf2, 0x5c, 0xbe, 0x61,
	0xe1, 0x68, 0x47, 0x3b, 0x55, 0x91, 0xa4, 0xc9, 0xd4, 0xff, 0xb5, 0x50, 0x53, 0x3d, 0x7b, 0x33,
	0xde, 0x8e, 0x76, 0xaf, 0x52, 0xf0, 0x1c, 0xd6, 0xe3, 0x33, 0x09, 0xe1, 0x95, 0x1f, 0xa9, 0xa1,
	0x87, 0x20, 0x4b, 0x75, 0xaf, 0xcb, 0x35, 0x6d, 0xa3, 0x89, 0x37, 0x97, 0x4b, 0xf2, 0xd6, 0xab,
	0x05, 0xff, 0x0d, 0x72, 0x6a, 0xd6, 0x16, 0xed, 0x41, 0x31, 0x5a, 0x52, 0xe4, 0xc4, 0x39, 0xe3,
	0xbb, 0x5b, 0x49, 0x20, 0x89, 0xc7, 0x95, 0x04, 0xd1, 0xea, 0xa1, 0x4f, 0x69, 0xe4, 0x2f, 0x04,
	0x03, 0x70, 0x92, 0x36, 0x27, 0x72, 0xda, 0xcc, 0x15, 0x53, 0xdf, 0x43, 0x5b, 0x5f, 0xab, 0xa2,
	0xf9, 0x55, 0x7e, 0x00, 0x79, 0x67, 0xed, 0xe1, 0xb9, 0x6a, 0x3d, 0xca, 0xf3, 0x24, 0xcf, 0xfd,
	0x4b, 0x35, 0x35, 0xb2, 0xf5, 0x1f, 0xba, 0xfb, 0x16, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xc6, 0x53,
	0x54, 0xb9, 0x03, 0x00, 0x00,
}
