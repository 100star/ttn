// Copyright Â© 2016 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/empty.proto";

package discovery;

option go_package = "github.com/TheThingsNetwork/ttn/api/discovery";

message Metadata {
  enum Key {
    OTHER = 0;

    // The value for PREFIX consists of 1 byte denoting the number of bits,
    // followed by the prefix and enough trailing bits to fill 4 octets
    PREFIX = 1; // For Brokers

    // APP_EUI is used for announcing join handlers.
    // The value for APP_EUI is the byte slice of the AppEUI string
    APP_EUI = 2; // For Handlers

    // APP_ID is used for announcing regular handlers
    // The value for APP_ID is the byte slice of the AppID string
    APP_ID = 3; // For Handlers
  }
  Key key = 1;
  bytes value = 2;
}

message Announcement {
  string id = 1;              // ID
  string service_name = 2;    // Service name/type: router/broker/handler
  string service_version = 3; // Service version in the form "[version]-[commit] ([build date])"
  string description = 4;     // Description of the component
  string url         = 5;     // URL with documentation or more information about this component
  bool   public      = 6;     // Indicates whether this service is part of The Things Network (the public community network)
  string net_address = 11;    // Network address in the form "[hostname]:[port]"
  string public_key  = 12;    // ECDSA public key of this component
  string certificate = 13;    // TLS Certificate (if enabled)
  repeated Metadata metadata = 21;
}

message GetAllRequest {
  string service_name = 1;
}

message GetRequest {
  string id = 1;
  string service_name = 2;
}

message MetadataRequest {
  string id = 1;
  string service_name = 2;
  Metadata metadata = 11;
}

message AnnouncementsResponse {
  repeated Announcement services = 1;
}

service Discovery {
  rpc Announce(Announcement) returns (google.protobuf.Empty);
  rpc GetAll(GetAllRequest) returns (AnnouncementsResponse);
  rpc Get(GetRequest) returns (Announcement);
  rpc AddMetadata(MetadataRequest) returns (google.protobuf.Empty);
  rpc DeleteMetadata(MetadataRequest) returns (google.protobuf.Empty);
}

// The DiscoveryManager service provides configuration and monitoring functionality
service DiscoveryManager {

}
