// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/noc/noc.proto
// DO NOT EDIT!

/*
	Package noc is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/noc/noc.proto

	It has these top-level messages:
*/
package noc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import gateway "github.com/TheThingsNetwork/ttn/api/gateway"
import router "github.com/TheThingsNetwork/ttn/api/router"
import broker "github.com/TheThingsNetwork/ttn/api/broker"
import handler "github.com/TheThingsNetwork/ttn/api/handler"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Monitor service

type MonitorClient interface {
	GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_GatewayStatusClient, error)
	GatewayUplink(ctx context.Context, opts ...grpc.CallOption) (Monitor_GatewayUplinkClient, error)
	RouterStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_RouterStatusClient, error)
	BrokerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_BrokerStatusClient, error)
	HandlerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_HandlerStatusClient, error)
}

type monitorClient struct {
	cc *grpc.ClientConn
}

func NewMonitorClient(cc *grpc.ClientConn) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_GatewayStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitor_serviceDesc.Streams[0], c.cc, "/noc.Monitor/GatewayStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorGatewayStatusClient{stream}
	return x, nil
}

type Monitor_GatewayStatusClient interface {
	Send(*gateway.Status) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type monitorGatewayStatusClient struct {
	grpc.ClientStream
}

func (x *monitorGatewayStatusClient) Send(m *gateway.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorGatewayStatusClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorClient) GatewayUplink(ctx context.Context, opts ...grpc.CallOption) (Monitor_GatewayUplinkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitor_serviceDesc.Streams[1], c.cc, "/noc.Monitor/GatewayUplink", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorGatewayUplinkClient{stream}
	return x, nil
}

type Monitor_GatewayUplinkClient interface {
	Send(*router.UplinkMessage) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type monitorGatewayUplinkClient struct {
	grpc.ClientStream
}

func (x *monitorGatewayUplinkClient) Send(m *router.UplinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorGatewayUplinkClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorClient) RouterStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_RouterStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitor_serviceDesc.Streams[2], c.cc, "/noc.Monitor/RouterStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorRouterStatusClient{stream}
	return x, nil
}

type Monitor_RouterStatusClient interface {
	Send(*router.Status) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type monitorRouterStatusClient struct {
	grpc.ClientStream
}

func (x *monitorRouterStatusClient) Send(m *router.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorRouterStatusClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorClient) BrokerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_BrokerStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitor_serviceDesc.Streams[3], c.cc, "/noc.Monitor/BrokerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorBrokerStatusClient{stream}
	return x, nil
}

type Monitor_BrokerStatusClient interface {
	Send(*broker.Status) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type monitorBrokerStatusClient struct {
	grpc.ClientStream
}

func (x *monitorBrokerStatusClient) Send(m *broker.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorBrokerStatusClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorClient) HandlerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitor_HandlerStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitor_serviceDesc.Streams[4], c.cc, "/noc.Monitor/HandlerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorHandlerStatusClient{stream}
	return x, nil
}

type Monitor_HandlerStatusClient interface {
	Send(*handler.Status) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type monitorHandlerStatusClient struct {
	grpc.ClientStream
}

func (x *monitorHandlerStatusClient) Send(m *handler.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitorHandlerStatusClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Monitor service

type MonitorServer interface {
	GatewayStatus(Monitor_GatewayStatusServer) error
	GatewayUplink(Monitor_GatewayUplinkServer) error
	RouterStatus(Monitor_RouterStatusServer) error
	BrokerStatus(Monitor_BrokerStatusServer) error
	HandlerStatus(Monitor_HandlerStatusServer) error
}

func RegisterMonitorServer(s *grpc.Server, srv MonitorServer) {
	s.RegisterService(&_Monitor_serviceDesc, srv)
}

func _Monitor_GatewayStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServer).GatewayStatus(&monitorGatewayStatusServer{stream})
}

type Monitor_GatewayStatusServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*gateway.Status, error)
	grpc.ServerStream
}

type monitorGatewayStatusServer struct {
	grpc.ServerStream
}

func (x *monitorGatewayStatusServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorGatewayStatusServer) Recv() (*gateway.Status, error) {
	m := new(gateway.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitor_GatewayUplink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServer).GatewayUplink(&monitorGatewayUplinkServer{stream})
}

type Monitor_GatewayUplinkServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*router.UplinkMessage, error)
	grpc.ServerStream
}

type monitorGatewayUplinkServer struct {
	grpc.ServerStream
}

func (x *monitorGatewayUplinkServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorGatewayUplinkServer) Recv() (*router.UplinkMessage, error) {
	m := new(router.UplinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitor_RouterStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServer).RouterStatus(&monitorRouterStatusServer{stream})
}

type Monitor_RouterStatusServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*router.Status, error)
	grpc.ServerStream
}

type monitorRouterStatusServer struct {
	grpc.ServerStream
}

func (x *monitorRouterStatusServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorRouterStatusServer) Recv() (*router.Status, error) {
	m := new(router.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitor_BrokerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServer).BrokerStatus(&monitorBrokerStatusServer{stream})
}

type Monitor_BrokerStatusServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*broker.Status, error)
	grpc.ServerStream
}

type monitorBrokerStatusServer struct {
	grpc.ServerStream
}

func (x *monitorBrokerStatusServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorBrokerStatusServer) Recv() (*broker.Status, error) {
	m := new(broker.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitor_HandlerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServer).HandlerStatus(&monitorHandlerStatusServer{stream})
}

type Monitor_HandlerStatusServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*handler.Status, error)
	grpc.ServerStream
}

type monitorHandlerStatusServer struct {
	grpc.ServerStream
}

func (x *monitorHandlerStatusServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitorHandlerStatusServer) Recv() (*handler.Status, error) {
	m := new(handler.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noc.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatewayStatus",
			Handler:       _Monitor_GatewayStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GatewayUplink",
			Handler:       _Monitor_GatewayUplink_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouterStatus",
			Handler:       _Monitor_RouterStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BrokerStatus",
			Handler:       _Monitor_BrokerStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HandlerStatus",
			Handler:       _Monitor_HandlerStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorNoc,
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/noc/noc.proto", fileDescriptorNoc)
}

var fileDescriptorNoc = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0xc9, 0x48, 0x0d, 0xc9, 0xc8, 0xcc, 0x4b, 0x2f,
	0xf6, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x29, 0xc9, 0xd3, 0x4f, 0x2c, 0xc8, 0xd4,
	0xcf, 0xcb, 0x4f, 0x06, 0x61, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xe6, 0xbc, 0xfc, 0x64,
	0x29, 0xe9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0xb0, 0x50, 0x52, 0x69, 0x9a, 0x7e, 0x6a,
	0x6e, 0x41, 0x49, 0x25, 0x44, 0x85, 0x94, 0x25, 0x31, 0x86, 0xa6, 0x27, 0x96, 0xa4, 0x96, 0x27,
	0x56, 0xc2, 0x68, 0xa8, 0x56, 0x73, 0x62, 0xb4, 0x16, 0xe5, 0x97, 0x96, 0xa4, 0x16, 0x41, 0x29,
	0x52, 0x34, 0x26, 0x15, 0xe5, 0x67, 0xa7, 0x16, 0x41, 0x29, 0x52, 0x1c, 0x9b, 0x91, 0x98, 0x97,
	0x92, 0x93, 0x5a, 0x04, 0xa3, 0x21, 0x5a, 0x8d, 0xb6, 0x33, 0x71, 0xb1, 0xfb, 0xe6, 0xe7, 0x65,
	0x96, 0xe4, 0x17, 0x09, 0x59, 0x71, 0xf1, 0xba, 0x43, 0x7c, 0x12, 0x5c, 0x92, 0x58, 0x52, 0x5a,
	0x2c, 0xc4, 0xaf, 0x07, 0xf3, 0x19, 0x44, 0x40, 0x4a, 0x4c, 0x0f, 0x12, 0x66, 0x7a, 0xb0, 0x30,
	0xd3, 0x73, 0x05, 0x85, 0x99, 0x06, 0xa3, 0x90, 0x03, 0x5c, 0x6f, 0x68, 0x41, 0x4e, 0x66, 0x5e,
	0xb6, 0x90, 0xa8, 0x1e, 0xd4, 0x6f, 0x10, 0xbe, 0x6f, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0x2a, 0x1e,
	0x13, 0x2c, 0xb8, 0x78, 0x82, 0xc0, 0x3a, 0xa0, 0x96, 0xf3, 0xc1, 0x0c, 0x20, 0x68, 0xb7, 0x05,
	0x17, 0x8f, 0x13, 0x38, 0x38, 0xe0, 0x3a, 0xa1, 0xa1, 0x43, 0x50, 0xa7, 0x15, 0x17, 0xaf, 0x07,
	0x24, 0x38, 0xe0, 0x3e, 0x86, 0x05, 0x0f, 0x21, 0xbd, 0x4e, 0x02, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x35,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x86, 0xd0, 0xa9, 0x91, 0x02, 0x00, 0x00,
}
